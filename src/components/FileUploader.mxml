<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" 
	minWidth="400" 
	height="100%" 
	minHeight="200"
	creationComplete="init()"
	xmlns:jwolib="http://www.jwolib.com/2006/mxml">
	
	<mx:Metadata>
		[Event(name="uploadComplete", type="flash.events.Event")]
		[Event(name="uploadProgress", type="flash.events.ProgressEvent")]
		[Event(name="uploadCancel", type="flash.events.Event")]
		[Event(name="uploadIOError", type="flash.events.IOErrorEvent")]
		[Event(name="uploadSecurityError", type="flash.events.SecurityErrorEvent")]
	</mx:Metadata>

<mx:Script>
    <![CDATA[
    	import vo.FileNode;
    	import vo.Ion;
    	import vo.Calculation;
    	import mx.collections.ArrayCollection;
	    import flash.filesystem.*;
		import mx.controls.*;
		import mx.managers.*;
        import mx.events.*;
		import flash.events.*;
		import flash.net.*;
		
		private var m_strUploadUrl:String;
		[Bindable] private var m_historyFile:File;
		private var m_uploadFile:File;
		private var m_numCurrentUpload:Number = 0;			
		private var fileLoader:File = new flash.filesystem.File();

        private var m_currentCalc:Calculation = null;
        private var m_currentIon:Ion = null;
        private var m_sCurrentPerspective:String = null;
		[Bindable] private var m_calcsCollection:ArrayCollection;

		[Bindable] private var m_dir:File;
		[Bindable] private var m_filesCollection:ArrayCollection;
		[Bindable] private var m_arrUploadFiles:Array;

		public function set historyFile(f:File):void 
		{
			m_historyFile = f;
		}

	    private function visitFiles(f:File ): void
	    {
	        if (f.isDirectory) 
	        {
	            var children:Array = f.getDirectoryListing();
	            for (var i:int = 0; i < children.length; i++) 
	            {
	            	if(children[i] is File)
	            	{
	            		var chFile:File = File(children[i]);
	            		visitFiles(new File(chFile.nativePath));
	            	}
	            }
	        } 
	        else 
	        {
	        	var nPath:String = f.nativePath;
	        	var pathData:Array = parsePath(nPath);
				var calcName:String = pathData[0];
				var typeName:String = pathData[2];
				var ionName:String = pathData[1];
				var item:Object = new Object();
				
				//item.size = formatFileSize(f.size);
				item.size = f.size;
				item.name = f.name;
				item.calc = calcName;
				item.type = typeName;
				item.ion = ionName;
				item.object = f;
				
				populateCalcsCollection(item);				
				m_filesCollection.addItem(item);
	        }
	       	listFiles.dataProvider = m_filesCollection;
	        m_arrUploadFiles = m_filesCollection.toArray();
	    }
	    
	    private function populateCalcsCollection(item:Object):void
	    {
			if(!m_currentCalc || item.calc != m_currentCalc.calcName)
			{
				m_currentCalc = new Calculation(item.calc);
				m_calcsCollection.addItem(m_currentCalc);
			}
			
			if(!m_currentCalc.getIon(Number(item.ion)))
			{
				var ion:Ion = new Ion(Number(item.ion));
				m_currentIon = ion;
				m_currentCalc.addIon(m_currentIon);
			}

			if(!m_sCurrentPerspective || item.type != m_sCurrentPerspective)
			{
				m_sCurrentPerspective = item.type;
			}
			
			var fileNode:FileNode = new FileNode(item);
			m_currentIon.addFileNode(fileNode);
	    }

		private function parsePath(nPath:String):Array
		{
			var res:Array = new Array(3);
        	var parts:Array = nPath.split("\\");
			var calcName:String = "";
			var ionName:String = "";
			var typeName:String = "";
			
        	for(var k:int = 0; k < parts.length; k++)
        	{
        		var index:int = parts.length - k;
        		
        		switch(index)
        		{
        			case 4:
        				calcName = parts[k];
        				res[0] = calcName;
        			break;
        			case 3:
        				typeName = parts[k];
        				res[1] = typeName;
        			break;
        			case 2:
        				ionName = parts[k];
        				res[2] = ionName;
        			break;
        			default:
        			break;
        		}
        	}
        	return res;
		}
		
		private function openDirectory(event:Event):void
		{
			try 
			{
				fileLoader.browseForDirectory('');
				fileLoader.addEventListener(Event.SELECT, selectDirectory);
			}
			catch (error:Error)
			{
    			trace("Failed:", error.message)
			}
		}
		
		private function selectDirectory(event:Event):void
		{
			m_dir = null;
		    m_dir = event.target as File;
		    var sNativePath:String = m_dir.nativePath;
		    
		    m_calcsCollection = new ArrayCollection();
		    
		    visitFiles(m_dir );
		    if(m_filesCollection)
		    {
				enableUI();
				uploadCheck();
		    }
		}

	    private function init():void
	    {
	    	m_filesCollection = new ArrayCollection();
	    }
			
		// Set uploadUrl
		public function set uploadUrl(strUploadUrl:String):void 
		{
			m_strUploadUrl = strUploadUrl;
		}
			
		// Called to format number to file size
		private function formatFileSize(numSize:Number):String 
		{
			var strReturn:String;
			numSize = Number(numSize / 1000);
			strReturn = String(numSize.toFixed(1) + " KB");
			
			if (numSize > 1000) 
			{
				numSize = numSize / 1000;
				strReturn = String(numSize.toFixed(1) + " MB");
				
				if (numSize > 1000) 
				{
					numSize = numSize / 1000;
					strReturn = String(numSize.toFixed(1) + " GB");
				}
			}				
			return strReturn;
		}
		
		// Called to remove selected file(s) for upload
		private function removeFiles():void 
		{
			var arrSelected:Array = listFiles.selectedIndices;
			
			if (arrSelected.length >= 1) 
			{
				for (var i:Number = 0; i < arrSelected.length; i++) 
				{
					m_arrUploadFiles[Number(arrSelected[i])] = null;
				}
				
				for (var j:Number = 0; j < m_arrUploadFiles.length; j++) 
				{
					if (m_arrUploadFiles[j] == null) 
					{
						m_arrUploadFiles.splice(j, 1);
						j--;
					}
				}
				listFiles.dataProvider = m_arrUploadFiles;
				listFiles.selectedIndex = 0;					
			}
			updateProgBar();
			scrollFiles();
			uploadCheck();
		}
		
		// Called to check if there is at least one file to upload
		private function uploadCheck():void 
		{
			if (m_arrUploadFiles.length == 0) 
			{
				btnUpload.enabled = false;
				listFiles.verticalScrollPolicy = "off";
			} 
			else 
			{
				btnUpload.enabled = true;
				listFiles.verticalScrollPolicy = "on";
			}
		}
		
		// Disable UI control
		private function disableUI():void 
		{
			btnAdd.enabled = false;
			btnRemove.enabled = false;
			btnUpload.enabled = false;
			btnCancel.enabled = true;
			listFiles.enabled = false;
			listFiles.verticalScrollPolicy = "off";
		}
		
		// Enable UI control
		private function enableUI():void 
		{
			btnAdd.enabled = true;
			btnRemove.enabled = true;
			btnUpload.enabled = true;
			btnCancel.enabled = false;
			listFiles.enabled = true;
			listFiles.verticalScrollPolicy = "on";
		}
		
		// Scroll listFiles to selected row
		private function scrollFiles():void 
		{
			listFiles.verticalScrollPosition = listFiles.selectedIndex;
			listFiles.validateNow();
		}
		
		// Called to upload file based on current upload number
		private function startUpload():void 
		{
			if (m_arrUploadFiles && m_arrUploadFiles.length > 0) 
			{
				disableUI();
				listFiles.selectedIndex = m_numCurrentUpload;
				scrollFiles();

				var request:URLRequest = new URLRequest();
			    request.url = m_strUploadUrl;
			    
			    m_uploadFile = listFiles.selectedItem.object;
			    m_uploadFile.addEventListener(ProgressEvent.PROGRESS, onUploadProgress);
			   	m_uploadFile.addEventListener(Event.COMPLETE, onUploadComplete);
			    m_uploadFile.addEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
			  	m_uploadFile.addEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
			    
				var params:URLVariables = new URLVariables();
				params.calc = listFiles.selectedItem.calc;
				params.ion = listFiles.selectedItem.ion;
				params.type = listFiles.selectedItem.type;
				params.name = listFiles.selectedItem.name;
				request.data = params;
			    m_uploadFile.upload(request);
			}
		}
		
		// Cancel and clear eventlisteners on last upload
		private function clearUpload():void 
		{
			if(m_uploadFile)
			{
				m_uploadFile.removeEventListener(ProgressEvent.PROGRESS, onUploadProgress);
				m_uploadFile.removeEventListener(Event.COMPLETE, onUploadComplete);
				m_uploadFile.removeEventListener(IOErrorEvent.IO_ERROR, onUploadIoError);
				m_uploadFile.removeEventListener(SecurityErrorEvent.SECURITY_ERROR, onUploadSecurityError);
				m_uploadFile.cancel();
				m_numCurrentUpload = 0;
				updateProgBar();
				enableUI();
			}
		}
		
		// Called on upload cancel
		private function onUploadCanceled():void 
		{
			clearUpload();
			dispatchEvent(new Event("uploadCancel"));
		}
		
		// Get upload progress
		private function onUploadProgress(event:ProgressEvent):void 
		{
			var numPerc:Number = Math.round((event.bytesLoaded / event.bytesTotal) * 100);
			updateProgBar(numPerc);
			var evt:ProgressEvent = new ProgressEvent("uploadProgress", false, false, event.bytesLoaded, event.bytesTotal);
			dispatchEvent(evt);
		}
		
		// Update progBar
		private function updateProgBar(numPerc:Number = 0):void 
		{
			var strLabel:String = (m_numCurrentUpload + 1) + "/" + m_arrUploadFiles.length;
			strLabel = (m_numCurrentUpload + 1 <= m_arrUploadFiles.length && numPerc > 0 && numPerc < 100) ? numPerc + "% - " + strLabel : strLabel;
			strLabel = (m_numCurrentUpload + 1 == m_arrUploadFiles.length && numPerc == 100) ? "Upload Complete - " + strLabel : strLabel;
			strLabel = (m_arrUploadFiles.length == 0) ? "" : strLabel;
			progBar.label = strLabel;
			progBar.setProgress(numPerc, 100);
			progBar.validateNow();
		}
		
		private function markUploadedFile(f:File):void
		{
        	var nPath:String = f.nativePath;
        	var pathData:Array = parsePath(nPath);
			var calcName:String = pathData[0];
			var typeName:String = pathData[2];
			var ionName:String = pathData[1];
			
			for each(var calc:Calculation in m_calcsCollection)
			{
				if(calcName == calc.calcName)
				{
					calc.setWasUploadedForFile(Number(ionName), typeName, f.name);
					break;
				}
			}
		}
		
		private function writeCalcsXml():void
		{
				//var file:File = File.applicationStorageDirectory;
				//file = file.resolvePath("calculations.xml");
				
				var file:File = m_historyFile;
				var newXMLStr:String = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" + "\n" + 
										"<calculations>" + "\n";
				
				for each(var calc:Calculation in m_calcsCollection )
				{
					var sCalc:String = calc.toXml();
					newXMLStr += sCalc;
				}
				
				newXMLStr += "</calculations>";
				var fs:FileStream = new FileStream();
				fs.open(file, FileMode.WRITE);
				fs.writeUTFBytes(newXMLStr);
				fs.close();
		}
		
		// Called on upload complete
		private function onUploadComplete(event:Event):void 
		{
			var f:File = null;
			if(event.currentTarget is File)
			{
				f = File(event.currentTarget);
				markUploadedFile(f);
			}
			
			m_numCurrentUpload++;				
			if (m_numCurrentUpload < m_arrUploadFiles.length) 
			{
				startUpload();
			} 
			else 
			{
				writeCalcsXml();
				enableUI();
				clearUpload();
				dispatchEvent(new Event("uploadComplete"));
				
			}
		}
		
		// Called on upload io error
		private function onUploadIoError(event:IOErrorEvent):void 
		{
			clearUpload();
			var evt:IOErrorEvent = new IOErrorEvent("uploadIoError", false, false, event.text);
			dispatchEvent(evt);
		}
		
		// Called on upload security error
		private function onUploadSecurityError(event:SecurityErrorEvent):void 
		{
			clearUpload();
			var evt:SecurityErrorEvent = new SecurityErrorEvent("uploadSecurityError", false, false, event.text);
			dispatchEvent(evt);
		}

    ]]>
 </mx:Script>

    <jwolib:Pod 
    	id="pod" 
    	title="Upload calculation files"
    	titleIcon="@Embed('components/assets/upload.gif')"
        width="100%" 
        height="100%" 
        headerHeight="40"
        >
          <mx:Canvas  width="100%" height="100%">
			<mx:DataGrid 
				id="listFiles" 
				width="100%"
				left="0" 
				top="0" 
				bottom="0" 
				right="0"
				allowMultipleSelection="true" 
				verticalScrollPolicy="on"
				draggableColumns="false" 
				resizableColumns="false" 
				sortableColumns="false"
				>
				<mx:columns>
					<mx:DataGridColumn headerText="Calculation" width="150" dataField="calc" textAlign="left"/>
					<mx:DataGridColumn headerText="Ion" dataField="ion" textAlign="right"/>
					<mx:DataGridColumn headerText="Type" dataField="type" textAlign="right"/>
					<mx:DataGridColumn headerText="File name" dataField="name" textAlign="right"/>
					<mx:DataGridColumn headerText="Size" dataField="size" textAlign="right"/>
				</mx:columns>
			</mx:DataGrid>
		</mx:Canvas>
		<mx:ControlBar horizontalAlign="center" verticalAlign="middle">
			<mx:Button 
				width="20" 
				height="20"
				id="btnAdd" 
				toolTip="Add calculation file(s)" 
				click="openDirectory(event)" 
				icon="@Embed('components/assets/add.png')" 
				/>
			<mx:Button 
				width="20" 
				height="20"
				id="btnRemove" 
				toolTip="Remove file(s)" 
				click="removeFiles()" 
				icon="@Embed('components/assets/delete.png')" 
				/>
			<mx:ProgressBar 
				id="progBar" 
				mode="manual" 
				label="" 
				labelPlacement="center" 
				width="100%"
				/>
			<mx:Button 
				width="20" 
				height="20"
				id="btnCancel" 
				toolTip="Cancel upload" 
				click="onUploadCanceled()"
				icon="@Embed('components/assets/cancel2.png')" 
				/>
			<mx:Button 
				width="20" 
				height="20"
				id="btnUpload" 
				toolTip="Upload file(s)" 
				click="startUpload()" 
				icon="@Embed('components/assets/upload.gif')"
				/>
		</mx:ControlBar>	
    </jwolib:Pod>
</mx:Canvas>	
